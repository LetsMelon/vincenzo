<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1286" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1269.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1269.00"> </text><svg id="frames" x="10" width="1180" total_samples="140741"><g><title>[unknown] (29 samples, 0.02%)</title><rect x="0.0064%" y="1173" width="0.0206%" height="15" fill="rgb(227,0,7)" fg:x="9" fg:w="29"/><text x="0.2564%" y="1183.50"></text></g><g><title>[unknown] (28 samples, 0.02%)</title><rect x="0.0071%" y="1157" width="0.0199%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="28"/><text x="0.2571%" y="1167.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="0.0099%" y="1141" width="0.0171%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="24"/><text x="0.2599%" y="1151.50"></text></g><g><title>[unknown] (17 samples, 0.01%)</title><rect x="0.0149%" y="1125" width="0.0121%" height="15" fill="rgb(248,212,6)" fg:x="21" fg:w="17"/><text x="0.2649%" y="1135.50"></text></g><g><title>[libc.so.6] (64 samples, 0.05%)</title><rect x="0.0050%" y="1205" width="0.0455%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="64"/><text x="0.2550%" y="1215.50"></text></g><g><title>[libc.so.6] (63 samples, 0.04%)</title><rect x="0.0057%" y="1189" width="0.0448%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="63"/><text x="0.2557%" y="1199.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (31 samples, 0.02%)</title><rect x="0.0284%" y="1173" width="0.0220%" height="15" fill="rgb(207,160,47)" fg:x="40" fg:w="31"/><text x="0.2784%" y="1183.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (27 samples, 0.02%)</title><rect x="0.0313%" y="1157" width="0.0192%" height="15" fill="rgb(228,23,34)" fg:x="44" fg:w="27"/><text x="0.2813%" y="1167.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (27 samples, 0.02%)</title><rect x="0.0313%" y="1141" width="0.0192%" height="15" fill="rgb(218,30,26)" fg:x="44" fg:w="27"/><text x="0.2813%" y="1151.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (15 samples, 0.01%)</title><rect x="0.0398%" y="1125" width="0.0107%" height="15" fill="rgb(220,122,19)" fg:x="56" fg:w="15"/><text x="0.2898%" y="1135.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (15 samples, 0.01%)</title><rect x="0.0398%" y="1109" width="0.0107%" height="15" fill="rgb(250,228,42)" fg:x="56" fg:w="15"/><text x="0.2898%" y="1119.50"></text></g><g><title>bittorrent-rust (104 samples, 0.07%)</title><rect x="0.0000%" y="1221" width="0.0739%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="104"/><text x="0.2500%" y="1231.50"></text></g><g><title>[unknown] (33 samples, 0.02%)</title><rect x="0.0504%" y="1205" width="0.0234%" height="15" fill="rgb(216,20,37)" fg:x="71" fg:w="33"/><text x="0.3004%" y="1215.50"></text></g><g><title>[[heap]] (20 samples, 0.01%)</title><rect x="0.0739%" y="1205" width="0.0142%" height="15" fill="rgb(206,188,39)" fg:x="104" fg:w="20"/><text x="0.3239%" y="1215.50"></text></g><g><title>clock_gettime (20 samples, 0.01%)</title><rect x="0.0739%" y="1189" width="0.0142%" height="15" fill="rgb(217,207,13)" fg:x="104" fg:w="20"/><text x="0.3239%" y="1199.50"></text></g><g><title>__vdso_clock_gettime (20 samples, 0.01%)</title><rect x="0.0739%" y="1173" width="0.0142%" height="15" fill="rgb(231,73,38)" fg:x="104" fg:w="20"/><text x="0.3239%" y="1183.50"></text></g><g><title>[unknown] (20 samples, 0.01%)</title><rect x="0.0739%" y="1157" width="0.0142%" height="15" fill="rgb(225,20,46)" fg:x="104" fg:w="20"/><text x="0.3239%" y="1167.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.01%)</title><rect x="0.0931%" y="965" width="0.0121%" height="15" fill="rgb(210,31,41)" fg:x="131" fg:w="17"/><text x="0.3431%" y="975.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.01%)</title><rect x="0.0931%" y="949" width="0.0121%" height="15" fill="rgb(221,200,47)" fg:x="131" fg:w="17"/><text x="0.3431%" y="959.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (15 samples, 0.01%)</title><rect x="0.0945%" y="933" width="0.0107%" height="15" fill="rgb(226,26,5)" fg:x="133" fg:w="15"/><text x="0.3445%" y="943.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (15 samples, 0.01%)</title><rect x="0.0945%" y="917" width="0.0107%" height="15" fill="rgb(249,33,26)" fg:x="133" fg:w="15"/><text x="0.3445%" y="927.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (26 samples, 0.02%)</title><rect x="0.1307%" y="533" width="0.0185%" height="15" fill="rgb(235,183,28)" fg:x="184" fg:w="26"/><text x="0.3807%" y="543.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (26 samples, 0.02%)</title><rect x="0.1307%" y="517" width="0.0185%" height="15" fill="rgb(221,5,38)" fg:x="184" fg:w="26"/><text x="0.3807%" y="527.50"></text></g><g><title>tokio::time::clock::Clock::now (26 samples, 0.02%)</title><rect x="0.1307%" y="501" width="0.0185%" height="15" fill="rgb(247,18,42)" fg:x="184" fg:w="26"/><text x="0.3807%" y="511.50"></text></g><g><title>tokio::time::clock::now (26 samples, 0.02%)</title><rect x="0.1307%" y="485" width="0.0185%" height="15" fill="rgb(241,131,45)" fg:x="184" fg:w="26"/><text x="0.3807%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (26 samples, 0.02%)</title><rect x="0.1307%" y="469" width="0.0185%" height="15" fill="rgb(249,31,29)" fg:x="184" fg:w="26"/><text x="0.3807%" y="479.50"></text></g><g><title>clock_gettime (26 samples, 0.02%)</title><rect x="0.1307%" y="453" width="0.0185%" height="15" fill="rgb(225,111,53)" fg:x="184" fg:w="26"/><text x="0.3807%" y="463.50"></text></g><g><title>__vdso_clock_gettime (26 samples, 0.02%)</title><rect x="0.1307%" y="437" width="0.0185%" height="15" fill="rgb(238,160,17)" fg:x="184" fg:w="26"/><text x="0.3807%" y="447.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="0.1307%" y="421" width="0.0185%" height="15" fill="rgb(214,148,48)" fg:x="184" fg:w="26"/><text x="0.3807%" y="431.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="0.1307%" y="405" width="0.0185%" height="15" fill="rgb(232,36,49)" fg:x="184" fg:w="26"/><text x="0.3807%" y="415.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="0.1307%" y="389" width="0.0185%" height="15" fill="rgb(209,103,24)" fg:x="184" fg:w="26"/><text x="0.3807%" y="399.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="0.1307%" y="373" width="0.0185%" height="15" fill="rgb(229,88,8)" fg:x="184" fg:w="26"/><text x="0.3807%" y="383.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="0.1307%" y="357" width="0.0185%" height="15" fill="rgb(213,181,19)" fg:x="184" fg:w="26"/><text x="0.3807%" y="367.50"></text></g><g><title>[unknown] (26 samples, 0.02%)</title><rect x="0.1307%" y="341" width="0.0185%" height="15" fill="rgb(254,191,54)" fg:x="184" fg:w="26"/><text x="0.3807%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::maintenance (107 samples, 0.08%)</title><rect x="0.1094%" y="645" width="0.0760%" height="15" fill="rgb(241,83,37)" fg:x="154" fg:w="107"/><text x="0.3594%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (77 samples, 0.05%)</title><rect x="0.1307%" y="629" width="0.0547%" height="15" fill="rgb(233,36,39)" fg:x="184" fg:w="77"/><text x="0.3807%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park_timeout (77 samples, 0.05%)</title><rect x="0.1307%" y="613" width="0.0547%" height="15" fill="rgb(226,3,54)" fg:x="184" fg:w="77"/><text x="0.3807%" y="623.50"></text></g><g><title>tokio::runtime::driver::Driver::park_timeout (77 samples, 0.05%)</title><rect x="0.1307%" y="597" width="0.0547%" height="15" fill="rgb(245,192,40)" fg:x="184" fg:w="77"/><text x="0.3807%" y="607.50"></text></g><g><title>tokio::runtime::driver::TimeDriver::park_timeout (77 samples, 0.05%)</title><rect x="0.1307%" y="581" width="0.0547%" height="15" fill="rgb(238,167,29)" fg:x="184" fg:w="77"/><text x="0.3807%" y="591.50"></text></g><g><title>tokio::runtime::time::Driver::park_timeout (77 samples, 0.05%)</title><rect x="0.1307%" y="565" width="0.0547%" height="15" fill="rgb(232,182,51)" fg:x="184" fg:w="77"/><text x="0.3807%" y="575.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (77 samples, 0.05%)</title><rect x="0.1307%" y="549" width="0.0547%" height="15" fill="rgb(231,60,39)" fg:x="184" fg:w="77"/><text x="0.3807%" y="559.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (51 samples, 0.04%)</title><rect x="0.1492%" y="533" width="0.0362%" height="15" fill="rgb(208,69,12)" fg:x="210" fg:w="51"/><text x="0.3992%" y="543.50"></text></g><g><title>tokio::time::clock::Clock::now (51 samples, 0.04%)</title><rect x="0.1492%" y="517" width="0.0362%" height="15" fill="rgb(235,93,37)" fg:x="210" fg:w="51"/><text x="0.3992%" y="527.50"></text></g><g><title>tokio::time::clock::now (51 samples, 0.04%)</title><rect x="0.1492%" y="501" width="0.0362%" height="15" fill="rgb(213,116,39)" fg:x="210" fg:w="51"/><text x="0.3992%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (51 samples, 0.04%)</title><rect x="0.1492%" y="485" width="0.0362%" height="15" fill="rgb(222,207,29)" fg:x="210" fg:w="51"/><text x="0.3992%" y="495.50"></text></g><g><title>clock_gettime (51 samples, 0.04%)</title><rect x="0.1492%" y="469" width="0.0362%" height="15" fill="rgb(206,96,30)" fg:x="210" fg:w="51"/><text x="0.3992%" y="479.50"></text></g><g><title>__vdso_clock_gettime (51 samples, 0.04%)</title><rect x="0.1492%" y="453" width="0.0362%" height="15" fill="rgb(218,138,4)" fg:x="210" fg:w="51"/><text x="0.3992%" y="463.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="0.1492%" y="437" width="0.0362%" height="15" fill="rgb(250,191,14)" fg:x="210" fg:w="51"/><text x="0.3992%" y="447.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="0.1492%" y="421" width="0.0362%" height="15" fill="rgb(239,60,40)" fg:x="210" fg:w="51"/><text x="0.3992%" y="431.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="0.1492%" y="405" width="0.0362%" height="15" fill="rgb(206,27,48)" fg:x="210" fg:w="51"/><text x="0.3992%" y="415.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="0.1492%" y="389" width="0.0362%" height="15" fill="rgb(225,35,8)" fg:x="210" fg:w="51"/><text x="0.3992%" y="399.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="0.1492%" y="373" width="0.0362%" height="15" fill="rgb(250,213,24)" fg:x="210" fg:w="51"/><text x="0.3992%" y="383.50"></text></g><g><title>[unknown] (51 samples, 0.04%)</title><rect x="0.1492%" y="357" width="0.0362%" height="15" fill="rgb(247,123,22)" fg:x="210" fg:w="51"/><text x="0.3992%" y="367.50"></text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::about_to_park (25,571 samples, 18.17%)</title><rect x="0.1854%" y="629" width="18.1688%" height="15" fill="rgb(231,138,38)" fg:x="261" fg:w="25571"/><text x="0.4354%" y="639.50">tokio::runtime::metrics::bat..</text></g><g><title>std::time::Instant::elapsed (25,571 samples, 18.17%)</title><rect x="0.1854%" y="613" width="18.1688%" height="15" fill="rgb(231,145,46)" fg:x="261" fg:w="25571"/><text x="0.4354%" y="623.50">std::time::Instant::elapsed</text></g><g><title>std::time::Instant::now (25,567 samples, 18.17%)</title><rect x="0.1883%" y="597" width="18.1660%" height="15" fill="rgb(251,118,11)" fg:x="265" fg:w="25567"/><text x="0.4383%" y="607.50">std::time::Instant::now</text></g><g><title>std::sys::unix::time::inner::Instant::now (25,567 samples, 18.17%)</title><rect x="0.1883%" y="581" width="18.1660%" height="15" fill="rgb(217,147,25)" fg:x="265" fg:w="25567"/><text x="0.4383%" y="591.50">std::sys::unix::time::inner:..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (25,567 samples, 18.17%)</title><rect x="0.1883%" y="565" width="18.1660%" height="15" fill="rgb(247,81,37)" fg:x="265" fg:w="25567"/><text x="0.4383%" y="575.50">std::sys::unix::time::inner:..</text></g><g><title>clock_gettime (25,567 samples, 18.17%)</title><rect x="0.1883%" y="549" width="18.1660%" height="15" fill="rgb(209,12,38)" fg:x="265" fg:w="25567"/><text x="0.4383%" y="559.50">clock_gettime</text></g><g><title>__vdso_clock_gettime (25,557 samples, 18.16%)</title><rect x="0.1954%" y="533" width="18.1589%" height="15" fill="rgb(227,1,9)" fg:x="275" fg:w="25557"/><text x="0.4454%" y="543.50">__vdso_clock_gettime</text></g><g><title>[unknown] (25,536 samples, 18.14%)</title><rect x="0.2103%" y="517" width="18.1440%" height="15" fill="rgb(248,47,43)" fg:x="296" fg:w="25536"/><text x="0.4603%" y="527.50">[unknown]</text></g><g><title>[unknown] (25,536 samples, 18.14%)</title><rect x="0.2103%" y="501" width="18.1440%" height="15" fill="rgb(221,10,30)" fg:x="296" fg:w="25536"/><text x="0.4603%" y="511.50">[unknown]</text></g><g><title>[unknown] (25,535 samples, 18.14%)</title><rect x="0.2110%" y="485" width="18.1433%" height="15" fill="rgb(210,229,1)" fg:x="297" fg:w="25535"/><text x="0.4610%" y="495.50">[unknown]</text></g><g><title>[unknown] (25,526 samples, 18.14%)</title><rect x="0.2174%" y="469" width="18.1369%" height="15" fill="rgb(222,148,37)" fg:x="306" fg:w="25526"/><text x="0.4674%" y="479.50">[unknown]</text></g><g><title>[unknown] (25,518 samples, 18.13%)</title><rect x="0.2231%" y="453" width="18.1312%" height="15" fill="rgb(234,67,33)" fg:x="314" fg:w="25518"/><text x="0.4731%" y="463.50">[unknown]</text></g><g><title>[unknown] (25,513 samples, 18.13%)</title><rect x="0.2267%" y="437" width="18.1276%" height="15" fill="rgb(247,98,35)" fg:x="319" fg:w="25513"/><text x="0.4767%" y="447.50">[unknown]</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (17,487 samples, 12.42%)</title><rect x="18.3550%" y="613" width="12.4250%" height="15" fill="rgb(247,138,52)" fg:x="25833" fg:w="17487"/><text x="18.6050%" y="623.50">std::sys::unix::tim..</text></g><g><title>clock_gettime (17,487 samples, 12.42%)</title><rect x="18.3550%" y="597" width="12.4250%" height="15" fill="rgb(213,79,30)" fg:x="25833" fg:w="17487"/><text x="18.6050%" y="607.50">clock_gettime</text></g><g><title>__vdso_clock_gettime (17,480 samples, 12.42%)</title><rect x="18.3600%" y="581" width="12.4200%" height="15" fill="rgb(246,177,23)" fg:x="25840" fg:w="17480"/><text x="18.6100%" y="591.50">__vdso_clock_gettime</text></g><g><title>[unknown] (17,475 samples, 12.42%)</title><rect x="18.3635%" y="565" width="12.4164%" height="15" fill="rgb(230,62,27)" fg:x="25845" fg:w="17475"/><text x="18.6135%" y="575.50">[unknown]</text></g><g><title>[unknown] (17,474 samples, 12.42%)</title><rect x="18.3642%" y="549" width="12.4157%" height="15" fill="rgb(216,154,8)" fg:x="25846" fg:w="17474"/><text x="18.6142%" y="559.50">[unknown]</text></g><g><title>[unknown] (17,473 samples, 12.42%)</title><rect x="18.3649%" y="533" width="12.4150%" height="15" fill="rgb(244,35,45)" fg:x="25847" fg:w="17473"/><text x="18.6149%" y="543.50">[unknown]</text></g><g><title>[unknown] (17,465 samples, 12.41%)</title><rect x="18.3706%" y="517" width="12.4093%" height="15" fill="rgb(251,115,12)" fg:x="25855" fg:w="17465"/><text x="18.6206%" y="527.50">[unknown]</text></g><g><title>[unknown] (17,451 samples, 12.40%)</title><rect x="18.3806%" y="501" width="12.3994%" height="15" fill="rgb(240,54,50)" fg:x="25869" fg:w="17451"/><text x="18.6306%" y="511.50">[unknown]</text></g><g><title>[unknown] (17,450 samples, 12.40%)</title><rect x="18.3813%" y="485" width="12.3987%" height="15" fill="rgb(233,84,52)" fg:x="25870" fg:w="17450"/><text x="18.6313%" y="495.50">[unknown]</text></g><g><title>tokio::runtime::metrics::batch::MetricsBatch::returned_from_park (17,491 samples, 12.43%)</title><rect x="18.3543%" y="629" width="12.4278%" height="15" fill="rgb(207,117,47)" fg:x="25832" fg:w="17491"/><text x="18.6043%" y="639.50">tokio::runtime::met..</text></g><g><title>std::sys::unix::futex::futex_wait (10,007 samples, 7.11%)</title><rect x="30.7942%" y="517" width="7.1102%" height="15" fill="rgb(249,43,39)" fg:x="43340" fg:w="10007"/><text x="31.0442%" y="527.50">std::sys::..</text></g><g><title>syscall (10,003 samples, 7.11%)</title><rect x="30.7970%" y="501" width="7.1074%" height="15" fill="rgb(209,38,44)" fg:x="43344" fg:w="10003"/><text x="31.0470%" y="511.50">syscall</text></g><g><title>[unknown] (10,003 samples, 7.11%)</title><rect x="30.7970%" y="485" width="7.1074%" height="15" fill="rgb(236,212,23)" fg:x="43344" fg:w="10003"/><text x="31.0470%" y="495.50">[unknown]</text></g><g><title>[unknown] (10,003 samples, 7.11%)</title><rect x="30.7970%" y="469" width="7.1074%" height="15" fill="rgb(242,79,21)" fg:x="43344" fg:w="10003"/><text x="31.0470%" y="479.50">[unknown]</text></g><g><title>[unknown] (10,003 samples, 7.11%)</title><rect x="30.7970%" y="453" width="7.1074%" height="15" fill="rgb(211,96,35)" fg:x="43344" fg:w="10003"/><text x="31.0470%" y="463.50">[unknown]</text></g><g><title>[unknown] (10,002 samples, 7.11%)</title><rect x="30.7977%" y="437" width="7.1067%" height="15" fill="rgb(253,215,40)" fg:x="43345" fg:w="10002"/><text x="31.0477%" y="447.50">[unknown]</text></g><g><title>[unknown] (10,002 samples, 7.11%)</title><rect x="30.7977%" y="421" width="7.1067%" height="15" fill="rgb(211,81,21)" fg:x="43345" fg:w="10002"/><text x="31.0477%" y="431.50">[unknown]</text></g><g><title>[unknown] (9,998 samples, 7.10%)</title><rect x="30.8005%" y="405" width="7.1038%" height="15" fill="rgb(208,190,38)" fg:x="43349" fg:w="9998"/><text x="31.0505%" y="415.50">[unknown]</text></g><g><title>[unknown] (9,990 samples, 7.10%)</title><rect x="30.8062%" y="389" width="7.0981%" height="15" fill="rgb(235,213,38)" fg:x="43357" fg:w="9990"/><text x="31.0562%" y="399.50">[unknown]</text></g><g><title>[unknown] (9,959 samples, 7.08%)</title><rect x="30.8283%" y="373" width="7.0761%" height="15" fill="rgb(237,122,38)" fg:x="43388" fg:w="9959"/><text x="31.0783%" y="383.50">[unknown]</text></g><g><title>[unknown] (9,824 samples, 6.98%)</title><rect x="30.9242%" y="357" width="6.9802%" height="15" fill="rgb(244,218,35)" fg:x="43523" fg:w="9824"/><text x="31.1742%" y="367.50">[unknown]</text></g><g><title>[unknown] (8,754 samples, 6.22%)</title><rect x="31.6844%" y="341" width="6.2199%" height="15" fill="rgb(240,68,47)" fg:x="44593" fg:w="8754"/><text x="31.9344%" y="351.50">[unknown]</text></g><g><title>[unknown] (7,370 samples, 5.24%)</title><rect x="32.6678%" y="325" width="5.2366%" height="15" fill="rgb(210,16,53)" fg:x="45977" fg:w="7370"/><text x="32.9178%" y="335.50">[unkno..</text></g><g><title>[unknown] (5,267 samples, 3.74%)</title><rect x="34.1620%" y="309" width="3.7423%" height="15" fill="rgb(235,124,12)" fg:x="48080" fg:w="5267"/><text x="34.4120%" y="319.50">[unk..</text></g><g><title>[unknown] (97 samples, 0.07%)</title><rect x="37.8355%" y="293" width="0.0689%" height="15" fill="rgb(224,169,11)" fg:x="53250" fg:w="97"/><text x="38.0855%" y="303.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (10,012 samples, 7.11%)</title><rect x="30.7942%" y="581" width="7.1138%" height="15" fill="rgb(250,166,2)" fg:x="43340" fg:w="10012"/><text x="31.0442%" y="591.50">tokio::run..</text></g><g><title>std::sync::condvar::Condvar::wait (10,012 samples, 7.11%)</title><rect x="30.7942%" y="565" width="7.1138%" height="15" fill="rgb(242,216,29)" fg:x="43340" fg:w="10012"/><text x="31.0442%" y="575.50">std::sync:..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait (10,012 samples, 7.11%)</title><rect x="30.7942%" y="549" width="7.1138%" height="15" fill="rgb(230,116,27)" fg:x="43340" fg:w="10012"/><text x="31.0442%" y="559.50">std::sys::..</text></g><g><title>std::sys::unix::locks::futex_condvar::Condvar::wait_optional_timeout (10,012 samples, 7.11%)</title><rect x="30.7942%" y="533" width="7.1138%" height="15" fill="rgb(228,99,48)" fg:x="43340" fg:w="10012"/><text x="31.0442%" y="543.50">std::sys::..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (30 samples, 0.02%)</title><rect x="37.9243%" y="485" width="0.0213%" height="15" fill="rgb(253,11,6)" fg:x="53375" fg:w="30"/><text x="38.1743%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (3,471 samples, 2.47%)</title><rect x="37.9470%" y="437" width="2.4662%" height="15" fill="rgb(247,143,39)" fg:x="53407" fg:w="3471"/><text x="38.1970%" y="447.50">st..</text></g><g><title>clock_gettime (3,469 samples, 2.46%)</title><rect x="37.9484%" y="421" width="2.4648%" height="15" fill="rgb(236,97,10)" fg:x="53409" fg:w="3469"/><text x="38.1984%" y="431.50">cl..</text></g><g><title>__vdso_clock_gettime (3,467 samples, 2.46%)</title><rect x="37.9499%" y="405" width="2.4634%" height="15" fill="rgb(233,208,19)" fg:x="53411" fg:w="3467"/><text x="38.1999%" y="415.50">__..</text></g><g><title>[unknown] (3,462 samples, 2.46%)</title><rect x="37.9534%" y="389" width="2.4598%" height="15" fill="rgb(216,164,2)" fg:x="53416" fg:w="3462"/><text x="38.2034%" y="399.50">[u..</text></g><g><title>[unknown] (3,461 samples, 2.46%)</title><rect x="37.9541%" y="373" width="2.4591%" height="15" fill="rgb(220,129,5)" fg:x="53417" fg:w="3461"/><text x="38.2041%" y="383.50">[u..</text></g><g><title>[unknown] (3,461 samples, 2.46%)</title><rect x="37.9541%" y="357" width="2.4591%" height="15" fill="rgb(242,17,10)" fg:x="53417" fg:w="3461"/><text x="38.2041%" y="367.50">[u..</text></g><g><title>[unknown] (3,453 samples, 2.45%)</title><rect x="37.9598%" y="341" width="2.4534%" height="15" fill="rgb(242,107,0)" fg:x="53425" fg:w="3453"/><text x="38.2098%" y="351.50">[u..</text></g><g><title>[unknown] (3,451 samples, 2.45%)</title><rect x="37.9612%" y="325" width="2.4520%" height="15" fill="rgb(251,28,31)" fg:x="53427" fg:w="3451"/><text x="38.2112%" y="335.50">[u..</text></g><g><title>[unknown] (3,451 samples, 2.45%)</title><rect x="37.9612%" y="309" width="2.4520%" height="15" fill="rgb(233,223,10)" fg:x="53427" fg:w="3451"/><text x="38.2112%" y="319.50">[u..</text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (3,506 samples, 2.49%)</title><rect x="37.9243%" y="501" width="2.4911%" height="15" fill="rgb(215,21,27)" fg:x="53375" fg:w="3506"/><text x="38.1743%" y="511.50">to..</text></g><g><title>tokio::runtime::time::source::TimeSource::now (3,476 samples, 2.47%)</title><rect x="37.9456%" y="485" width="2.4698%" height="15" fill="rgb(232,23,21)" fg:x="53405" fg:w="3476"/><text x="38.1956%" y="495.50">to..</text></g><g><title>tokio::time::clock::Clock::now (3,474 samples, 2.47%)</title><rect x="37.9470%" y="469" width="2.4684%" height="15" fill="rgb(244,5,23)" fg:x="53407" fg:w="3474"/><text x="38.1970%" y="479.50">to..</text></g><g><title>tokio::time::clock::now (3,474 samples, 2.47%)</title><rect x="37.9470%" y="453" width="2.4684%" height="15" fill="rgb(226,81,46)" fg:x="53407" fg:w="3474"/><text x="38.1970%" y="463.50">to..</text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (1,429 samples, 1.02%)</title><rect x="40.4225%" y="437" width="1.0153%" height="15" fill="rgb(247,70,30)" fg:x="56891" fg:w="1429"/><text x="40.6725%" y="447.50"></text></g><g><title>epoll_wait (1,425 samples, 1.01%)</title><rect x="40.4253%" y="421" width="1.0125%" height="15" fill="rgb(212,68,19)" fg:x="56895" fg:w="1425"/><text x="40.6753%" y="431.50"></text></g><g><title>[unknown] (1,422 samples, 1.01%)</title><rect x="40.4275%" y="405" width="1.0104%" height="15" fill="rgb(240,187,13)" fg:x="56898" fg:w="1422"/><text x="40.6775%" y="415.50"></text></g><g><title>[unknown] (1,422 samples, 1.01%)</title><rect x="40.4275%" y="389" width="1.0104%" height="15" fill="rgb(223,113,26)" fg:x="56898" fg:w="1422"/><text x="40.6775%" y="399.50"></text></g><g><title>[unknown] (1,422 samples, 1.01%)</title><rect x="40.4275%" y="373" width="1.0104%" height="15" fill="rgb(206,192,2)" fg:x="56898" fg:w="1422"/><text x="40.6775%" y="383.50"></text></g><g><title>[unknown] (1,421 samples, 1.01%)</title><rect x="40.4282%" y="357" width="1.0097%" height="15" fill="rgb(241,108,4)" fg:x="56899" fg:w="1421"/><text x="40.6782%" y="367.50"></text></g><g><title>[unknown] (1,421 samples, 1.01%)</title><rect x="40.4282%" y="341" width="1.0097%" height="15" fill="rgb(247,173,49)" fg:x="56899" fg:w="1421"/><text x="40.6782%" y="351.50"></text></g><g><title>tokio::runtime::time::Driver::park_thread_timeout (1,441 samples, 1.02%)</title><rect x="40.4154%" y="501" width="1.0239%" height="15" fill="rgb(224,114,35)" fg:x="56881" fg:w="1441"/><text x="40.6654%" y="511.50"></text></g><g><title>tokio::runtime::driver::IoStack::park_timeout (1,441 samples, 1.02%)</title><rect x="40.4154%" y="485" width="1.0239%" height="15" fill="rgb(245,159,27)" fg:x="56881" fg:w="1441"/><text x="40.6654%" y="495.50"></text></g><g><title>tokio::runtime::io::Driver::park_timeout (1,441 samples, 1.02%)</title><rect x="40.4154%" y="469" width="1.0239%" height="15" fill="rgb(245,172,44)" fg:x="56881" fg:w="1441"/><text x="40.6654%" y="479.50"></text></g><g><title>tokio::runtime::io::Driver::turn (1,441 samples, 1.02%)</title><rect x="40.4154%" y="453" width="1.0239%" height="15" fill="rgb(236,23,11)" fg:x="56881" fg:w="1441"/><text x="40.6654%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (18,401 samples, 13.07%)</title><rect x="30.7878%" y="613" width="13.0744%" height="15" fill="rgb(205,117,38)" fg:x="43331" fg:w="18401"/><text x="31.0378%" y="623.50">tokio::runtime::sche..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (18,400 samples, 13.07%)</title><rect x="30.7885%" y="597" width="13.0737%" height="15" fill="rgb(237,72,25)" fg:x="43332" fg:w="18400"/><text x="31.0385%" y="607.50">tokio::runtime::sche..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (8,380 samples, 5.95%)</title><rect x="37.9079%" y="581" width="5.9542%" height="15" fill="rgb(244,70,9)" fg:x="53352" fg:w="8380"/><text x="38.1579%" y="591.50">tokio::r..</text></g><g><title>tokio::runtime::driver::Driver::park (8,358 samples, 5.94%)</title><rect x="37.9236%" y="565" width="5.9386%" height="15" fill="rgb(217,125,39)" fg:x="53374" fg:w="8358"/><text x="38.1736%" y="575.50">tokio::r..</text></g><g><title>tokio::runtime::driver::TimeDriver::park (8,358 samples, 5.94%)</title><rect x="37.9236%" y="549" width="5.9386%" height="15" fill="rgb(235,36,10)" fg:x="53374" fg:w="8358"/><text x="38.1736%" y="559.50">tokio::r..</text></g><g><title>tokio::runtime::time::Driver::park (8,358 samples, 5.94%)</title><rect x="37.9236%" y="533" width="5.9386%" height="15" fill="rgb(251,123,47)" fg:x="53374" fg:w="8358"/><text x="38.1736%" y="543.50">tokio::r..</text></g><g><title>tokio::runtime::time::Driver::park_internal (8,358 samples, 5.94%)</title><rect x="37.9236%" y="517" width="5.9386%" height="15" fill="rgb(221,13,13)" fg:x="53374" fg:w="8358"/><text x="38.1736%" y="527.50">tokio::r..</text></g><g><title>tokio::runtime::time::source::TimeSource::now (3,410 samples, 2.42%)</title><rect x="41.4392%" y="501" width="2.4229%" height="15" fill="rgb(238,131,9)" fg:x="58322" fg:w="3410"/><text x="41.6892%" y="511.50">to..</text></g><g><title>tokio::time::clock::Clock::now (3,410 samples, 2.42%)</title><rect x="41.4392%" y="485" width="2.4229%" height="15" fill="rgb(211,50,8)" fg:x="58322" fg:w="3410"/><text x="41.6892%" y="495.50">to..</text></g><g><title>tokio::time::clock::now (3,410 samples, 2.42%)</title><rect x="41.4392%" y="469" width="2.4229%" height="15" fill="rgb(245,182,24)" fg:x="58322" fg:w="3410"/><text x="41.6892%" y="479.50">to..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (3,410 samples, 2.42%)</title><rect x="41.4392%" y="453" width="2.4229%" height="15" fill="rgb(242,14,37)" fg:x="58322" fg:w="3410"/><text x="41.6892%" y="463.50">st..</text></g><g><title>clock_gettime (3,410 samples, 2.42%)</title><rect x="41.4392%" y="437" width="2.4229%" height="15" fill="rgb(246,228,12)" fg:x="58322" fg:w="3410"/><text x="41.6892%" y="447.50">cl..</text></g><g><title>__vdso_clock_gettime (3,410 samples, 2.42%)</title><rect x="41.4392%" y="421" width="2.4229%" height="15" fill="rgb(213,55,15)" fg:x="58322" fg:w="3410"/><text x="41.6892%" y="431.50">__..</text></g><g><title>[unknown] (3,409 samples, 2.42%)</title><rect x="41.4399%" y="405" width="2.4222%" height="15" fill="rgb(209,9,3)" fg:x="58323" fg:w="3409"/><text x="41.6899%" y="415.50">[u..</text></g><g><title>[unknown] (3,409 samples, 2.42%)</title><rect x="41.4399%" y="389" width="2.4222%" height="15" fill="rgb(230,59,30)" fg:x="58323" fg:w="3409"/><text x="41.6899%" y="399.50">[u..</text></g><g><title>[unknown] (3,409 samples, 2.42%)</title><rect x="41.4399%" y="373" width="2.4222%" height="15" fill="rgb(209,121,21)" fg:x="58323" fg:w="3409"/><text x="41.6899%" y="383.50">[u..</text></g><g><title>[unknown] (3,409 samples, 2.42%)</title><rect x="41.4399%" y="357" width="2.4222%" height="15" fill="rgb(220,109,13)" fg:x="58323" fg:w="3409"/><text x="41.6899%" y="367.50">[u..</text></g><g><title>[unknown] (3,409 samples, 2.42%)</title><rect x="41.4399%" y="341" width="2.4222%" height="15" fill="rgb(232,18,1)" fg:x="58323" fg:w="3409"/><text x="41.6899%" y="351.50">[u..</text></g><g><title>[unknown] (3,409 samples, 2.42%)</title><rect x="41.4399%" y="325" width="2.4222%" height="15" fill="rgb(215,41,42)" fg:x="58323" fg:w="3409"/><text x="41.6899%" y="335.50">[u..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (18,427 samples, 13.09%)</title><rect x="30.7821%" y="629" width="13.0928%" height="15" fill="rgb(224,123,36)" fg:x="43323" fg:w="18427"/><text x="31.0321%" y="639.50">tokio::runtime::sche..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_parked (20 samples, 0.01%)</title><rect x="43.8827%" y="629" width="0.0142%" height="15" fill="rgb(240,125,3)" fg:x="61761" fg:w="20"/><text x="44.1327%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::is_parked (20 samples, 0.01%)</title><rect x="43.8827%" y="613" width="0.0142%" height="15" fill="rgb(205,98,50)" fg:x="61761" fg:w="20"/><text x="44.1327%" y="623.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (18 samples, 0.01%)</title><rect x="43.8842%" y="597" width="0.0128%" height="15" fill="rgb(205,185,37)" fg:x="61763" fg:w="18"/><text x="44.1342%" y="607.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (18 samples, 0.01%)</title><rect x="43.8842%" y="581" width="0.0128%" height="15" fill="rgb(238,207,15)" fg:x="61763" fg:w="18"/><text x="44.1342%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (17 samples, 0.01%)</title><rect x="43.8849%" y="565" width="0.0121%" height="15" fill="rgb(213,199,42)" fg:x="61764" fg:w="17"/><text x="44.1349%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;alloc::vec::Vec&lt;usize&gt;&gt;&gt; (25 samples, 0.02%)</title><rect x="43.8977%" y="597" width="0.0178%" height="15" fill="rgb(235,201,11)" fg:x="61782" fg:w="25"/><text x="44.1477%" y="607.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.02%)</title><rect x="43.8977%" y="581" width="0.0178%" height="15" fill="rgb(207,46,11)" fg:x="61782" fg:w="25"/><text x="44.1477%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (25 samples, 0.02%)</title><rect x="43.8977%" y="565" width="0.0178%" height="15" fill="rgb(241,35,35)" fg:x="61782" fg:w="25"/><text x="44.1477%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (31 samples, 0.02%)</title><rect x="43.8969%" y="613" width="0.0220%" height="15" fill="rgb(243,32,47)" fg:x="61781" fg:w="31"/><text x="44.1469%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (61,557 samples, 43.74%)</title><rect x="0.1854%" y="645" width="43.7378%" height="15" fill="rgb(247,202,23)" fg:x="261" fg:w="61557"/><text x="0.4354%" y="655.50">tokio::runtime::scheduler::multi_thread::worker::Context::park</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (37 samples, 0.03%)</title><rect x="43.8969%" y="629" width="0.0263%" height="15" fill="rgb(219,102,11)" fg:x="61781" fg:w="37"/><text x="44.1469%" y="639.50"></text></g><g><title>syscall (2,187 samples, 1.55%)</title><rect x="43.9673%" y="469" width="1.5539%" height="15" fill="rgb(243,110,44)" fg:x="61880" fg:w="2187"/><text x="44.2173%" y="479.50"></text></g><g><title>[unknown] (2,111 samples, 1.50%)</title><rect x="44.0213%" y="453" width="1.4999%" height="15" fill="rgb(222,74,54)" fg:x="61956" fg:w="2111"/><text x="44.2713%" y="463.50"></text></g><g><title>[unknown] (2,097 samples, 1.49%)</title><rect x="44.0312%" y="437" width="1.4900%" height="15" fill="rgb(216,99,12)" fg:x="61970" fg:w="2097"/><text x="44.2812%" y="447.50"></text></g><g><title>[unknown] (2,088 samples, 1.48%)</title><rect x="44.0376%" y="421" width="1.4836%" height="15" fill="rgb(226,22,26)" fg:x="61979" fg:w="2088"/><text x="44.2876%" y="431.50"></text></g><g><title>[unknown] (2,059 samples, 1.46%)</title><rect x="44.0582%" y="405" width="1.4630%" height="15" fill="rgb(217,163,10)" fg:x="62008" fg:w="2059"/><text x="44.3082%" y="415.50"></text></g><g><title>[unknown] (2,026 samples, 1.44%)</title><rect x="44.0817%" y="389" width="1.4395%" height="15" fill="rgb(213,25,53)" fg:x="62041" fg:w="2026"/><text x="44.3317%" y="399.50"></text></g><g><title>[unknown] (1,653 samples, 1.17%)</title><rect x="44.3467%" y="373" width="1.1745%" height="15" fill="rgb(252,105,26)" fg:x="62414" fg:w="1653"/><text x="44.5967%" y="383.50"></text></g><g><title>[unknown] (1,302 samples, 0.93%)</title><rect x="44.5961%" y="357" width="0.9251%" height="15" fill="rgb(220,39,43)" fg:x="62765" fg:w="1302"/><text x="44.8461%" y="367.50"></text></g><g><title>[unknown] (960 samples, 0.68%)</title><rect x="44.8391%" y="341" width="0.6821%" height="15" fill="rgb(229,68,48)" fg:x="63107" fg:w="960"/><text x="45.0891%" y="351.50"></text></g><g><title>[unknown] (775 samples, 0.55%)</title><rect x="44.9705%" y="325" width="0.5507%" height="15" fill="rgb(252,8,32)" fg:x="63292" fg:w="775"/><text x="45.2205%" y="335.50"></text></g><g><title>[unknown] (82 samples, 0.06%)</title><rect x="45.4629%" y="309" width="0.0583%" height="15" fill="rgb(223,20,43)" fg:x="63985" fg:w="82"/><text x="45.7129%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (69 samples, 0.05%)</title><rect x="45.5212%" y="453" width="0.0490%" height="15" fill="rgb(229,81,49)" fg:x="64067" fg:w="69"/><text x="45.7712%" y="463.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (69 samples, 0.05%)</title><rect x="45.5212%" y="437" width="0.0490%" height="15" fill="rgb(236,28,36)" fg:x="64067" fg:w="69"/><text x="45.7712%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (69 samples, 0.05%)</title><rect x="45.5212%" y="421" width="0.0490%" height="15" fill="rgb(249,185,26)" fg:x="64067" fg:w="69"/><text x="45.7712%" y="431.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (1,163 samples, 0.83%)</title><rect x="45.6519%" y="389" width="0.8263%" height="15" fill="rgb(249,174,33)" fg:x="64251" fg:w="1163"/><text x="45.9019%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (1,163 samples, 0.83%)</title><rect x="45.6519%" y="373" width="0.8263%" height="15" fill="rgb(233,201,37)" fg:x="64251" fg:w="1163"/><text x="45.9019%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::write (1,163 samples, 0.83%)</title><rect x="45.6519%" y="357" width="0.8263%" height="15" fill="rgb(221,78,26)" fg:x="64251" fg:w="1163"/><text x="45.9019%" y="367.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1,163 samples, 0.83%)</title><rect x="45.6519%" y="341" width="0.8263%" height="15" fill="rgb(250,127,30)" fg:x="64251" fg:w="1163"/><text x="45.9019%" y="351.50"></text></g><g><title>write (1,163 samples, 0.83%)</title><rect x="45.6519%" y="325" width="0.8263%" height="15" fill="rgb(230,49,44)" fg:x="64251" fg:w="1163"/><text x="45.9019%" y="335.50"></text></g><g><title>[unknown] (1,160 samples, 0.82%)</title><rect x="45.6541%" y="309" width="0.8242%" height="15" fill="rgb(229,67,23)" fg:x="64254" fg:w="1160"/><text x="45.9041%" y="319.50"></text></g><g><title>[unknown] (1,159 samples, 0.82%)</title><rect x="45.6548%" y="293" width="0.8235%" height="15" fill="rgb(249,83,47)" fg:x="64255" fg:w="1159"/><text x="45.9048%" y="303.50"></text></g><g><title>[unknown] (1,159 samples, 0.82%)</title><rect x="45.6548%" y="277" width="0.8235%" height="15" fill="rgb(215,43,3)" fg:x="64255" fg:w="1159"/><text x="45.9048%" y="287.50"></text></g><g><title>[unknown] (1,156 samples, 0.82%)</title><rect x="45.6569%" y="261" width="0.8214%" height="15" fill="rgb(238,154,13)" fg:x="64258" fg:w="1156"/><text x="45.9069%" y="271.50"></text></g><g><title>[unknown] (1,150 samples, 0.82%)</title><rect x="45.6612%" y="245" width="0.8171%" height="15" fill="rgb(219,56,2)" fg:x="64264" fg:w="1150"/><text x="45.9112%" y="255.50"></text></g><g><title>[unknown] (1,131 samples, 0.80%)</title><rect x="45.6747%" y="229" width="0.8036%" height="15" fill="rgb(233,0,4)" fg:x="64283" fg:w="1131"/><text x="45.9247%" y="239.50"></text></g><g><title>[unknown] (984 samples, 0.70%)</title><rect x="45.7791%" y="213" width="0.6992%" height="15" fill="rgb(235,30,7)" fg:x="64430" fg:w="984"/><text x="46.0291%" y="223.50"></text></g><g><title>[unknown] (855 samples, 0.61%)</title><rect x="45.8708%" y="197" width="0.6075%" height="15" fill="rgb(250,79,13)" fg:x="64559" fg:w="855"/><text x="46.1208%" y="207.50"></text></g><g><title>[unknown] (654 samples, 0.46%)</title><rect x="46.0136%" y="181" width="0.4647%" height="15" fill="rgb(211,146,34)" fg:x="64760" fg:w="654"/><text x="46.2636%" y="191.50"></text></g><g><title>[unknown] (522 samples, 0.37%)</title><rect x="46.1074%" y="165" width="0.3709%" height="15" fill="rgb(228,22,38)" fg:x="64892" fg:w="522"/><text x="46.3574%" y="175.50"></text></g><g><title>[unknown] (491 samples, 0.35%)</title><rect x="46.1294%" y="149" width="0.3489%" height="15" fill="rgb(235,168,5)" fg:x="64923" fg:w="491"/><text x="46.3794%" y="159.50"></text></g><g><title>[unknown] (326 samples, 0.23%)</title><rect x="46.2467%" y="133" width="0.2316%" height="15" fill="rgb(221,155,16)" fg:x="65088" fg:w="326"/><text x="46.4967%" y="143.50"></text></g><g><title>[unknown] (230 samples, 0.16%)</title><rect x="46.3149%" y="117" width="0.1634%" height="15" fill="rgb(215,215,53)" fg:x="65184" fg:w="230"/><text x="46.5649%" y="127.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (1,165 samples, 0.83%)</title><rect x="45.6512%" y="437" width="0.8278%" height="15" fill="rgb(223,4,10)" fg:x="64250" fg:w="1165"/><text x="45.9012%" y="447.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (1,165 samples, 0.83%)</title><rect x="45.6512%" y="421" width="0.8278%" height="15" fill="rgb(234,103,6)" fg:x="64250" fg:w="1165"/><text x="45.9012%" y="431.50"></text></g><g><title>tokio::runtime::io::Handle::unpark (1,164 samples, 0.83%)</title><rect x="45.6519%" y="405" width="0.8271%" height="15" fill="rgb(227,97,0)" fg:x="64251" fg:w="1164"/><text x="45.9019%" y="415.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (1,349 samples, 0.96%)</title><rect x="45.5212%" y="469" width="0.9585%" height="15" fill="rgb(234,150,53)" fg:x="64067" fg:w="1349"/><text x="45.7712%" y="479.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (1,280 samples, 0.91%)</title><rect x="45.5702%" y="453" width="0.9095%" height="15" fill="rgb(228,201,54)" fg:x="64136" fg:w="1280"/><text x="45.8202%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back (47 samples, 0.03%)</title><rect x="46.4818%" y="453" width="0.0334%" height="15" fill="rgb(222,22,37)" fg:x="65419" fg:w="47"/><text x="46.7318%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (34 samples, 0.02%)</title><rect x="46.4911%" y="437" width="0.0242%" height="15" fill="rgb(237,53,32)" fg:x="65432" fg:w="34"/><text x="46.7411%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (27 samples, 0.02%)</title><rect x="46.5522%" y="421" width="0.0192%" height="15" fill="rgb(233,25,53)" fg:x="65518" fg:w="27"/><text x="46.8022%" y="431.50"></text></g><g><title>tokio::loom::std::mutex::Mutex&lt;T&gt;::lock (441 samples, 0.31%)</title><rect x="46.5714%" y="421" width="0.3133%" height="15" fill="rgb(210,40,34)" fg:x="65545" fg:w="441"/><text x="46.8214%" y="431.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (441 samples, 0.31%)</title><rect x="46.5714%" y="405" width="0.3133%" height="15" fill="rgb(241,220,44)" fg:x="65545" fg:w="441"/><text x="46.8214%" y="415.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (441 samples, 0.31%)</title><rect x="46.5714%" y="389" width="0.3133%" height="15" fill="rgb(235,28,35)" fg:x="65545" fg:w="441"/><text x="46.8214%" y="399.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (5,038 samples, 3.58%)</title><rect x="43.9488%" y="533" width="3.5796%" height="15" fill="rgb(210,56,17)" fg:x="61854" fg:w="5038"/><text x="44.1988%" y="543.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (5,033 samples, 3.58%)</title><rect x="43.9524%" y="517" width="3.5761%" height="15" fill="rgb(224,130,29)" fg:x="61859" fg:w="5033"/><text x="44.2024%" y="527.50">toki..</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::with (5,033 samples, 3.58%)</title><rect x="43.9524%" y="501" width="3.5761%" height="15" fill="rgb(235,212,8)" fg:x="61859" fg:w="5033"/><text x="44.2024%" y="511.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::{{closure}} (5,025 samples, 3.57%)</title><rect x="43.9581%" y="485" width="3.5704%" height="15" fill="rgb(223,33,50)" fg:x="61867" fg:w="5025"/><text x="44.2081%" y="495.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (1,476 samples, 1.05%)</title><rect x="46.4797%" y="469" width="1.0487%" height="15" fill="rgb(219,149,13)" fg:x="65416" fg:w="1476"/><text x="46.7297%" y="479.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked (1,426 samples, 1.01%)</title><rect x="46.5152%" y="453" width="1.0132%" height="15" fill="rgb(250,156,29)" fg:x="65466" fg:w="1426"/><text x="46.7652%" y="463.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (1,414 samples, 1.00%)</title><rect x="46.5238%" y="437" width="1.0047%" height="15" fill="rgb(216,193,19)" fg:x="65478" fg:w="1414"/><text x="46.7738%" y="447.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (906 samples, 0.64%)</title><rect x="46.8847%" y="421" width="0.6437%" height="15" fill="rgb(216,135,14)" fg:x="65986" fg:w="906"/><text x="47.1347%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (701 samples, 0.50%)</title><rect x="47.0304%" y="405" width="0.4981%" height="15" fill="rgb(241,47,5)" fg:x="66191" fg:w="701"/><text x="47.2804%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (701 samples, 0.50%)</title><rect x="47.0304%" y="389" width="0.4981%" height="15" fill="rgb(233,42,35)" fg:x="66191" fg:w="701"/><text x="47.2804%" y="399.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::drop_reference (28 samples, 0.02%)</title><rect x="47.5284%" y="533" width="0.0199%" height="15" fill="rgb(231,13,6)" fg:x="66892" fg:w="28"/><text x="47.7784%" y="543.50"></text></g><g><title>tokio::runtime::task::state::State::ref_dec (27 samples, 0.02%)</title><rect x="47.5291%" y="517" width="0.0192%" height="15" fill="rgb(207,181,40)" fg:x="66893" fg:w="27"/><text x="47.7791%" y="527.50"></text></g><g><title>mio::sys::unix::tcp::connect (19 samples, 0.01%)</title><rect x="47.5817%" y="293" width="0.0135%" height="15" fill="rgb(254,173,49)" fg:x="66967" fg:w="19"/><text x="47.8317%" y="303.50"></text></g><g><title>mio::net::tcp::stream::TcpStream::connect (33 samples, 0.02%)</title><rect x="47.5768%" y="309" width="0.0234%" height="15" fill="rgb(221,1,38)" fg:x="66960" fg:w="33"/><text x="47.8268%" y="319.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::connect::{{closure}} (63 samples, 0.04%)</title><rect x="47.5718%" y="341" width="0.0448%" height="15" fill="rgb(206,124,46)" fg:x="66953" fg:w="63"/><text x="47.8218%" y="351.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::connect_addr::{{closure}} (62 samples, 0.04%)</title><rect x="47.5725%" y="325" width="0.0441%" height="15" fill="rgb(249,21,11)" fg:x="66954" fg:w="62"/><text x="47.8225%" y="335.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::connect_mio::{{closure}} (23 samples, 0.02%)</title><rect x="47.6002%" y="309" width="0.0163%" height="15" fill="rgb(222,201,40)" fg:x="66993" fg:w="23"/><text x="47.8502%" y="319.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::new (19 samples, 0.01%)</title><rect x="47.6030%" y="293" width="0.0135%" height="15" fill="rgb(235,61,29)" fg:x="66997" fg:w="19"/><text x="47.8530%" y="303.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new (18 samples, 0.01%)</title><rect x="47.6038%" y="277" width="0.0128%" height="15" fill="rgb(219,207,3)" fg:x="66998" fg:w="18"/><text x="47.8538%" y="287.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::new_with_interest (18 samples, 0.01%)</title><rect x="47.6038%" y="261" width="0.0128%" height="15" fill="rgb(222,56,46)" fg:x="66998" fg:w="18"/><text x="47.8538%" y="271.50"></text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (67 samples, 0.05%)</title><rect x="47.5696%" y="357" width="0.0476%" height="15" fill="rgb(239,76,54)" fg:x="66950" fg:w="67"/><text x="47.8196%" y="367.50"></text></g><g><title>bittorrent_rust::torrent::Torrent::add_magnet::{{closure}}::{{closure}} (80 samples, 0.06%)</title><rect x="47.5675%" y="373" width="0.0568%" height="15" fill="rgb(231,124,27)" fg:x="66947" fg:w="80"/><text x="47.8175%" y="383.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (486 samples, 0.35%)</title><rect x="49.9485%" y="325" width="0.3453%" height="15" fill="rgb(249,195,6)" fg:x="70298" fg:w="486"/><text x="50.1985%" y="335.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_priv (486 samples, 0.35%)</title><rect x="49.9485%" y="309" width="0.3453%" height="15" fill="rgb(237,174,47)" fg:x="70298" fg:w="486"/><text x="50.1985%" y="319.50"></text></g><g><title>[libc.so.6] (7,109 samples, 5.05%)</title><rect x="67.8708%" y="165" width="5.0511%" height="15" fill="rgb(206,201,31)" fg:x="95522" fg:w="7109"/><text x="68.1208%" y="175.50">[libc...</text></g><g><title>recv (43,686 samples, 31.04%)</title><rect x="57.0225%" y="181" width="31.0400%" height="15" fill="rgb(231,57,52)" fg:x="80254" fg:w="43686"/><text x="57.2725%" y="191.50">recv</text></g><g><title>[unknown] (21,309 samples, 15.14%)</title><rect x="72.9219%" y="165" width="15.1406%" height="15" fill="rgb(248,177,22)" fg:x="102631" fg:w="21309"/><text x="73.1719%" y="175.50">[unknown]</text></g><g><title>[unknown] (18,576 samples, 13.20%)</title><rect x="74.8638%" y="149" width="13.1987%" height="15" fill="rgb(215,211,37)" fg:x="105364" fg:w="18576"/><text x="75.1138%" y="159.50">[unknown]</text></g><g><title>[unknown] (18,459 samples, 13.12%)</title><rect x="74.9469%" y="133" width="13.1156%" height="15" fill="rgb(241,128,51)" fg:x="105481" fg:w="18459"/><text x="75.1969%" y="143.50">[unknown]</text></g><g><title>[unknown] (17,714 samples, 12.59%)</title><rect x="75.4762%" y="117" width="12.5862%" height="15" fill="rgb(227,165,31)" fg:x="106226" fg:w="17714"/><text x="75.7262%" y="127.50">[unknown]</text></g><g><title>[unknown] (2,903 samples, 2.06%)</title><rect x="85.9998%" y="101" width="2.0627%" height="15" fill="rgb(228,167,24)" fg:x="121037" fg:w="2903"/><text x="86.2498%" y="111.50">[..</text></g><g><title>[unknown] (2,424 samples, 1.72%)</title><rect x="86.3402%" y="85" width="1.7223%" height="15" fill="rgb(228,143,12)" fg:x="121516" fg:w="2424"/><text x="86.5902%" y="95.50"></text></g><g><title>[unknown] (1,197 samples, 0.85%)</title><rect x="87.2120%" y="69" width="0.8505%" height="15" fill="rgb(249,149,8)" fg:x="122743" fg:w="1197"/><text x="87.4620%" y="79.50"></text></g><g><title>[unknown] (788 samples, 0.56%)</title><rect x="87.5026%" y="53" width="0.5599%" height="15" fill="rgb(243,35,44)" fg:x="123152" fg:w="788"/><text x="87.7526%" y="63.50"></text></g><g><title>[unknown] (360 samples, 0.26%)</title><rect x="87.8067%" y="37" width="0.2558%" height="15" fill="rgb(246,89,9)" fg:x="123580" fg:w="360"/><text x="88.0567%" y="47.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (46,901 samples, 33.32%)</title><rect x="55.1168%" y="309" width="33.3243%" height="15" fill="rgb(233,213,13)" fg:x="77572" fg:w="46901"/><text x="55.3668%" y="319.50">&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::..</text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (45,772 samples, 32.52%)</title><rect x="55.9190%" y="293" width="32.5222%" height="15" fill="rgb(233,141,41)" fg:x="78701" fg:w="45772"/><text x="56.1690%" y="303.50">mio::io_source::IoSource&lt;T&gt;::do_io</text></g><g><title>mio::sys::unix::IoSourceState::do_io (45,772 samples, 32.52%)</title><rect x="55.9190%" y="277" width="32.5222%" height="15" fill="rgb(239,167,4)" fg:x="78701" fg:w="45772"/><text x="56.1690%" y="287.50">mio::sys::unix::IoSourceState::do_io</text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::{{closure}} (45,772 samples, 32.52%)</title><rect x="55.9190%" y="261" width="32.5222%" height="15" fill="rgb(209,217,16)" fg:x="78701" fg:w="45772"/><text x="56.1690%" y="271.50">&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;:..</text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (45,772 samples, 32.52%)</title><rect x="55.9190%" y="245" width="32.5222%" height="15" fill="rgb(219,88,35)" fg:x="78701" fg:w="45772"/><text x="56.1690%" y="255.50">&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read</text></g><g><title>std::sys_common::net::TcpStream::read (44,779 samples, 31.82%)</title><rect x="56.6246%" y="229" width="31.8166%" height="15" fill="rgb(220,193,23)" fg:x="79694" fg:w="44779"/><text x="56.8746%" y="239.50">std::sys_common::net::TcpStream::read</text></g><g><title>std::sys::unix::net::Socket::read (44,779 samples, 31.82%)</title><rect x="56.6246%" y="213" width="31.8166%" height="15" fill="rgb(230,90,52)" fg:x="79694" fg:w="44779"/><text x="56.8746%" y="223.50">std::sys::unix::net::Socket::read</text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (44,779 samples, 31.82%)</title><rect x="56.6246%" y="197" width="31.8166%" height="15" fill="rgb(252,106,19)" fg:x="79694" fg:w="44779"/><text x="56.8746%" y="207.50">std::sys::unix::net::Socket::recv_with_flags</text></g><g><title>std::sys::unix::cvt (533 samples, 0.38%)</title><rect x="88.0625%" y="181" width="0.3787%" height="15" fill="rgb(206,74,20)" fg:x="123940" fg:w="533"/><text x="88.3125%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (133 samples, 0.09%)</title><rect x="88.4412%" y="309" width="0.0945%" height="15" fill="rgb(230,138,44)" fg:x="124473" fg:w="133"/><text x="88.6912%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (428 samples, 0.30%)</title><rect x="88.5364%" y="309" width="0.3041%" height="15" fill="rgb(235,182,43)" fg:x="124607" fg:w="428"/><text x="88.7864%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (482 samples, 0.34%)</title><rect x="88.8405%" y="293" width="0.3425%" height="15" fill="rgb(242,16,51)" fg:x="125035" fg:w="482"/><text x="89.0905%" y="303.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::advance (484 samples, 0.34%)</title><rect x="88.8405%" y="309" width="0.3439%" height="15" fill="rgb(248,9,4)" fg:x="125035" fg:w="484"/><text x="89.0905%" y="319.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::assume_init (75 samples, 0.05%)</title><rect x="89.1844%" y="309" width="0.0533%" height="15" fill="rgb(210,31,22)" fg:x="125519" fg:w="75"/><text x="89.4344%" y="319.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::unfilled_mut (263 samples, 0.19%)</title><rect x="89.2377%" y="309" width="0.1869%" height="15" fill="rgb(239,54,39)" fg:x="125594" fg:w="263"/><text x="89.4877%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (263 samples, 0.19%)</title><rect x="89.2377%" y="293" width="0.1869%" height="15" fill="rgb(230,99,41)" fg:x="125594" fg:w="263"/><text x="89.4877%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (263 samples, 0.19%)</title><rect x="89.2377%" y="277" width="0.1869%" height="15" fill="rgb(253,106,12)" fg:x="125594" fg:w="263"/><text x="89.4877%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or (209 samples, 0.15%)</title><rect x="93.6678%" y="277" width="0.1485%" height="15" fill="rgb(213,46,41)" fg:x="131829" fg:w="209"/><text x="93.9178%" y="287.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (494 samples, 0.35%)</title><rect x="94.7528%" y="245" width="0.3510%" height="15" fill="rgb(215,133,35)" fg:x="133356" fg:w="494"/><text x="95.0028%" y="255.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (494 samples, 0.35%)</title><rect x="94.7528%" y="229" width="0.3510%" height="15" fill="rgb(213,28,5)" fg:x="133356" fg:w="494"/><text x="95.0028%" y="239.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (39 samples, 0.03%)</title><rect x="95.0761%" y="213" width="0.0277%" height="15" fill="rgb(215,77,49)" fg:x="133811" fg:w="39"/><text x="95.3261%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (39 samples, 0.03%)</title><rect x="95.0761%" y="197" width="0.0277%" height="15" fill="rgb(248,100,22)" fg:x="133811" fg:w="39"/><text x="95.3261%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (27 samples, 0.02%)</title><rect x="95.7063%" y="213" width="0.0192%" height="15" fill="rgb(208,67,9)" fg:x="134698" fg:w="27"/><text x="95.9563%" y="223.50"></text></g><g><title>tokio::runtime::coop::Budget::decrement (443 samples, 0.31%)</title><rect x="95.7319%" y="213" width="0.3148%" height="15" fill="rgb(219,133,21)" fg:x="134734" fg:w="443"/><text x="95.9819%" y="223.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (56 samples, 0.04%)</title><rect x="96.0466%" y="165" width="0.0398%" height="15" fill="rgb(246,46,29)" fg:x="135177" fg:w="56"/><text x="96.2966%" y="175.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::get (56 samples, 0.04%)</title><rect x="96.0466%" y="149" width="0.0398%" height="15" fill="rgb(246,185,52)" fg:x="135177" fg:w="56"/><text x="96.2966%" y="159.50"></text></g><g><title>std::thread::local::lazy::LazyKeyInner&lt;T&gt;::get (50 samples, 0.04%)</title><rect x="96.0509%" y="133" width="0.0355%" height="15" fill="rgb(252,136,11)" fg:x="135183" fg:w="50"/><text x="96.3009%" y="143.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (50 samples, 0.04%)</title><rect x="96.0509%" y="117" width="0.0355%" height="15" fill="rgb(219,138,53)" fg:x="135183" fg:w="50"/><text x="96.3009%" y="127.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (64 samples, 0.05%)</title><rect x="96.0864%" y="149" width="0.0455%" height="15" fill="rgb(211,51,23)" fg:x="135233" fg:w="64"/><text x="96.3364%" y="159.50"></text></g><g><title>&lt;tokio::runtime::scheduler::Handle as core::clone::Clone&gt;::clone (62 samples, 0.04%)</title><rect x="96.0878%" y="133" width="0.0441%" height="15" fill="rgb(247,221,28)" fg:x="135235" fg:w="62"/><text x="96.3378%" y="143.50"></text></g><g><title>tokio::runtime::context::try_current (122 samples, 0.09%)</title><rect x="96.0466%" y="197" width="0.0867%" height="15" fill="rgb(251,222,45)" fg:x="135177" fg:w="122"/><text x="96.2966%" y="207.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (122 samples, 0.09%)</title><rect x="96.0466%" y="181" width="0.0867%" height="15" fill="rgb(217,162,53)" fg:x="135177" fg:w="122"/><text x="96.2966%" y="191.50"></text></g><g><title>tokio::runtime::context::try_current::{{closure}} (66 samples, 0.05%)</title><rect x="96.0864%" y="165" width="0.0469%" height="15" fill="rgb(229,93,14)" fg:x="135233" fg:w="66"/><text x="96.3364%" y="175.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (3,500 samples, 2.49%)</title><rect x="93.6493%" y="293" width="2.4868%" height="15" fill="rgb(209,67,49)" fg:x="131803" fg:w="3500"/><text x="93.8993%" y="303.50">to..</text></g><g><title>tokio::runtime::context::budget (3,265 samples, 2.32%)</title><rect x="93.8163%" y="277" width="2.3199%" height="15" fill="rgb(213,87,29)" fg:x="132038" fg:w="3265"/><text x="94.0663%" y="287.50">t..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2,344 samples, 1.67%)</title><rect x="94.4707%" y="261" width="1.6655%" height="15" fill="rgb(205,151,52)" fg:x="132959" fg:w="2344"/><text x="94.7207%" y="271.50"></text></g><g><title>tokio::runtime::context::budget::{{closure}} (1,453 samples, 1.03%)</title><rect x="95.1038%" y="245" width="1.0324%" height="15" fill="rgb(253,215,39)" fg:x="133850" fg:w="1453"/><text x="95.3538%" y="255.50"></text></g><g><title>tokio::runtime::coop::poll_proceed::{{closure}} (1,453 samples, 1.03%)</title><rect x="95.1038%" y="229" width="1.0324%" height="15" fill="rgb(221,220,41)" fg:x="133850" fg:w="1453"/><text x="95.3538%" y="239.50"></text></g><g><title>tokio::runtime::coop::inc_budget_forced_yield_count (126 samples, 0.09%)</title><rect x="96.0466%" y="213" width="0.0895%" height="15" fill="rgb(218,133,21)" fg:x="135177" fg:w="126"/><text x="96.2966%" y="223.50"></text></g><g><title>tokio::runtime::io::Direction::mask (198 samples, 0.14%)</title><rect x="97.1678%" y="277" width="0.1407%" height="15" fill="rgb(221,193,43)" fg:x="136755" fg:w="198"/><text x="97.4178%" y="287.50"></text></g><g><title>&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read (67,171 samples, 47.73%)</title><rect x="49.5826%" y="341" width="47.7267%" height="15" fill="rgb(240,128,52)" fg:x="69783" fg:w="67171"/><text x="49.8326%" y="351.50">&lt;&amp;mut T as tokio::io::async_read::AsyncRead&gt;::poll_read</text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (66,170 samples, 47.02%)</title><rect x="50.2938%" y="325" width="47.0154%" height="15" fill="rgb(253,114,12)" fg:x="70784" fg:w="66170"/><text x="50.5438%" y="335.50">tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read</text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (11,097 samples, 7.88%)</title><rect x="89.4245%" y="309" width="7.8847%" height="15" fill="rgb(215,223,47)" fg:x="125857" fg:w="11097"/><text x="89.6745%" y="319.50">tokio::runt..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (1,651 samples, 1.17%)</title><rect x="96.1362%" y="293" width="1.1731%" height="15" fill="rgb(248,225,23)" fg:x="135303" fg:w="1651"/><text x="96.3862%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (444 samples, 0.32%)</title><rect x="97.3377%" y="325" width="0.3155%" height="15" fill="rgb(250,108,0)" fg:x="136994" fg:w="444"/><text x="97.5877%" y="335.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (444 samples, 0.32%)</title><rect x="97.3377%" y="309" width="0.3155%" height="15" fill="rgb(228,208,7)" fg:x="136994" fg:w="444"/><text x="97.5877%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (444 samples, 0.32%)</title><rect x="97.3377%" y="293" width="0.3155%" height="15" fill="rgb(244,45,10)" fg:x="136994" fg:w="444"/><text x="97.5877%" y="303.50"></text></g><g><title>tokio::io::read_buf::ReadBuf::filled (1,486 samples, 1.06%)</title><rect x="97.3092%" y="341" width="1.0558%" height="15" fill="rgb(207,125,25)" fg:x="136954" fg:w="1486"/><text x="97.5592%" y="351.50"></text></g><g><title>tokio::io::read_buf::slice_assume_init (1,002 samples, 0.71%)</title><rect x="97.6531%" y="325" width="0.7119%" height="15" fill="rgb(210,195,18)" fg:x="137438" fg:w="1002"/><text x="97.9031%" y="335.50"></text></g><g><title>bittorrent_rust::torrent::Torrent::listen_to_peers::{{closure}}::{{closure}}::{{closure}} (72,568 samples, 51.56%)</title><rect x="47.6244%" y="373" width="51.5614%" height="15" fill="rgb(249,80,12)" fg:x="67027" fg:w="72568"/><text x="47.8744%" y="383.50">bittorrent_rust::torrent::Torrent::listen_to_peers::{{closure}}::{{closure}}::{{closu..</text></g><g><title>&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll (72,055 samples, 51.20%)</title><rect x="47.9889%" y="357" width="51.1969%" height="15" fill="rgb(221,65,9)" fg:x="67540" fg:w="72055"/><text x="48.2389%" y="367.50">&lt;tokio::io::util::read::Read&lt;R&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::io::read_buf::ReadBuf::new (1,155 samples, 0.82%)</title><rect x="98.3651%" y="341" width="0.8207%" height="15" fill="rgb(235,49,36)" fg:x="138440" fg:w="1155"/><text x="98.6151%" y="351.50"></text></g><g><title>tokio::io::read_buf::slice_to_uninit_mut (1,007 samples, 0.72%)</title><rect x="98.4702%" y="325" width="0.7155%" height="15" fill="rgb(225,32,20)" fg:x="138588" fg:w="1007"/><text x="98.7202%" y="335.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (72,679 samples, 51.64%)</title><rect x="47.5533%" y="517" width="51.6402%" height="15" fill="rgb(215,141,46)" fg:x="66927" fg:w="72679"/><text x="47.8033%" y="527.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (72,679 samples, 51.64%)</title><rect x="47.5533%" y="501" width="51.6402%" height="15" fill="rgb(250,160,47)" fg:x="66927" fg:w="72679"/><text x="47.8033%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (72,679 samples, 51.64%)</title><rect x="47.5533%" y="485" width="51.6402%" height="15" fill="rgb(216,222,40)" fg:x="66927" fg:w="72679"/><text x="47.8033%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (72,679 samples, 51.64%)</title><rect x="47.5533%" y="469" width="51.6402%" height="15" fill="rgb(234,217,39)" fg:x="66927" fg:w="72679"/><text x="47.8033%" y="479.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (72,679 samples, 51.64%)</title><rect x="47.5533%" y="453" width="51.6402%" height="15" fill="rgb(207,178,40)" fg:x="66927" fg:w="72679"/><text x="47.8033%" y="463.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::c..</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (72,679 samples, 51.64%)</title><rect x="47.5533%" y="437" width="51.6402%" height="15" fill="rgb(221,136,13)" fg:x="66927" fg:w="72679"/><text x="47.8033%" y="447.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (72,666 samples, 51.63%)</title><rect x="47.5625%" y="421" width="51.6310%" height="15" fill="rgb(249,199,10)" fg:x="66940" fg:w="72666"/><text x="47.8125%" y="431.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (72,664 samples, 51.63%)</title><rect x="47.5640%" y="405" width="51.6296%" height="15" fill="rgb(249,222,13)" fg:x="66942" fg:w="72664"/><text x="47.8140%" y="415.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (72,664 samples, 51.63%)</title><rect x="47.5640%" y="389" width="51.6296%" height="15" fill="rgb(244,185,38)" fg:x="66942" fg:w="72664"/><text x="47.8140%" y="399.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>tokio::runtime::task::state::State::transition_to_running (17 samples, 0.01%)</title><rect x="99.1950%" y="517" width="0.0121%" height="15" fill="rgb(236,202,9)" fg:x="139608" fg:w="17"/><text x="99.4450%" y="527.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (77,779 samples, 55.26%)</title><rect x="43.9446%" y="549" width="55.2639%" height="15" fill="rgb(250,229,37)" fg:x="61848" fg:w="77779"/><text x="44.1946%" y="559.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (72,707 samples, 51.66%)</title><rect x="47.5483%" y="533" width="51.6601%" height="15" fill="rgb(206,174,23)" fg:x="66920" fg:w="72707"/><text x="47.7983%" y="543.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::coop::budget (77,798 samples, 55.28%)</title><rect x="43.9325%" y="629" width="55.2774%" height="15" fill="rgb(211,33,43)" fg:x="61831" fg:w="77798"/><text x="44.1825%" y="639.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (77,798 samples, 55.28%)</title><rect x="43.9325%" y="613" width="55.2774%" height="15" fill="rgb(245,58,50)" fg:x="61831" fg:w="77798"/><text x="44.1825%" y="623.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}} (77,794 samples, 55.27%)</title><rect x="43.9353%" y="597" width="55.2746%" height="15" fill="rgb(244,68,36)" fg:x="61835" fg:w="77794"/><text x="44.1853%" y="607.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task::{{closure}}</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (77,783 samples, 55.27%)</title><rect x="43.9431%" y="581" width="55.2668%" height="15" fill="rgb(232,229,15)" fg:x="61846" fg:w="77783"/><text x="44.1931%" y="591.50">tokio::runtime::task::LocalNotified&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (77,783 samples, 55.27%)</title><rect x="43.9431%" y="565" width="55.2668%" height="15" fill="rgb(254,30,23)" fg:x="61846" fg:w="77783"/><text x="44.1931%" y="575.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (77,822 samples, 55.29%)</title><rect x="43.9232%" y="645" width="55.2945%" height="15" fill="rgb(235,160,14)" fg:x="61818" fg:w="77822"/><text x="44.1732%" y="655.50">tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (38 samples, 0.03%)</title><rect x="99.2177%" y="645" width="0.0270%" height="15" fill="rgb(212,155,44)" fg:x="139640" fg:w="38"/><text x="99.4677%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task (19 samples, 0.01%)</title><rect x="99.2312%" y="629" width="0.0135%" height="15" fill="rgb(226,2,50)" fg:x="139659" fg:w="19"/><text x="99.4812%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (19 samples, 0.01%)</title><rect x="99.2312%" y="613" width="0.0135%" height="15" fill="rgb(234,177,6)" fg:x="139659" fg:w="19"/><text x="99.4812%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task::{{closure}} (19 samples, 0.01%)</title><rect x="99.2312%" y="597" width="0.0135%" height="15" fill="rgb(217,24,9)" fg:x="139659" fg:w="19"/><text x="99.4812%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::pop (19 samples, 0.01%)</title><rect x="99.2312%" y="581" width="0.0135%" height="15" fill="rgb(220,13,46)" fg:x="139659" fg:w="19"/><text x="99.4812%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (77 samples, 0.05%)</title><rect x="99.2568%" y="613" width="0.0547%" height="15" fill="rgb(239,221,27)" fg:x="139695" fg:w="77"/><text x="99.5068%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (67 samples, 0.05%)</title><rect x="99.2639%" y="597" width="0.0476%" height="15" fill="rgb(222,198,25)" fg:x="139705" fg:w="67"/><text x="99.5139%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (86 samples, 0.06%)</title><rect x="99.2511%" y="629" width="0.0611%" height="15" fill="rgb(211,99,13)" fg:x="139687" fg:w="86"/><text x="99.5011%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (96 samples, 0.07%)</title><rect x="99.2447%" y="645" width="0.0682%" height="15" fill="rgb(232,111,31)" fg:x="139678" fg:w="96"/><text x="99.4947%" y="655.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (139,627 samples, 99.21%)</title><rect x="0.1059%" y="885" width="99.2085%" height="15" fill="rgb(245,82,37)" fg:x="149" fg:w="139627"/><text x="0.3559%" y="895.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (139,627 samples, 99.21%)</title><rect x="0.1059%" y="869" width="99.2085%" height="15" fill="rgb(227,149,46)" fg:x="149" fg:w="139627"/><text x="0.3559%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (139,627 samples, 99.21%)</title><rect x="0.1059%" y="853" width="99.2085%" height="15" fill="rgb(218,36,50)" fg:x="149" fg:w="139627"/><text x="0.3559%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (139,627 samples, 99.21%)</title><rect x="0.1059%" y="837" width="99.2085%" height="15" fill="rgb(226,80,48)" fg:x="149" fg:w="139627"/><text x="0.3559%" y="847.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (139,627 samples, 99.21%)</title><rect x="0.1059%" y="821" width="99.2085%" height="15" fill="rgb(238,224,15)" fg:x="149" fg:w="139627"/><text x="0.3559%" y="831.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>tokio::runtime::task::harness::poll_future::{{closure}} (139,627 samples, 99.21%)</title><rect x="0.1059%" y="805" width="99.2085%" height="15" fill="rgb(241,136,10)" fg:x="149" fg:w="139627"/><text x="0.3559%" y="815.50">tokio::runtime::task::harness::poll_future::{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (139,627 samples, 99.21%)</title><rect x="0.1059%" y="789" width="99.2085%" height="15" fill="rgb(208,32,45)" fg:x="149" fg:w="139627"/><text x="0.3559%" y="799.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (139,627 samples, 99.21%)</title><rect x="0.1059%" y="773" width="99.2085%" height="15" fill="rgb(207,135,9)" fg:x="149" fg:w="139627"/><text x="0.3559%" y="783.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}} (139,627 samples, 99.21%)</title><rect x="0.1059%" y="757" width="99.2085%" height="15" fill="rgb(206,86,44)" fg:x="149" fg:w="139627"/><text x="0.3559%" y="767.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (139,626 samples, 99.21%)</title><rect x="0.1066%" y="741" width="99.2078%" height="15" fill="rgb(245,177,15)" fg:x="150" fg:w="139626"/><text x="0.3566%" y="751.50">&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}} (139,624 samples, 99.21%)</title><rect x="0.1080%" y="725" width="99.2063%" height="15" fill="rgb(206,64,50)" fg:x="152" fg:w="139624"/><text x="0.3580%" y="735.50">tokio::runtime::scheduler::multi_thread::worker::Launch::launch::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (139,624 samples, 99.21%)</title><rect x="0.1080%" y="709" width="99.2063%" height="15" fill="rgb(234,36,40)" fg:x="152" fg:w="139624"/><text x="0.3580%" y="719.50">tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (139,624 samples, 99.21%)</title><rect x="0.1080%" y="693" width="99.2063%" height="15" fill="rgb(213,64,8)" fg:x="152" fg:w="139624"/><text x="0.3580%" y="703.50">tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::{{closure}} (139,624 samples, 99.21%)</title><rect x="0.1080%" y="677" width="99.2063%" height="15" fill="rgb(210,75,36)" fg:x="152" fg:w="139624"/><text x="0.3580%" y="687.50">tokio::runtime::scheduler::multi_thread::worker::run::{{closure}}</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (139,624 samples, 99.21%)</title><rect x="0.1080%" y="661" width="99.2063%" height="15" fill="rgb(229,88,21)" fg:x="152" fg:w="139624"/><text x="0.3580%" y="671.50">tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>tokio::runtime::blocking::pool::Inner::run (139,653 samples, 99.23%)</title><rect x="0.0888%" y="981" width="99.2269%" height="15" fill="rgb(252,204,47)" fg:x="125" fg:w="139653"/><text x="0.3388%" y="991.50">tokio::runtime::blocking::pool::Inner::run</text></g><g><title>tokio::runtime::blocking::pool::Task::run (139,630 samples, 99.21%)</title><rect x="0.1052%" y="965" width="99.2106%" height="15" fill="rgb(208,77,27)" fg:x="148" fg:w="139630"/><text x="0.3552%" y="975.50">tokio::runtime::blocking::pool::Task::run</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (139,630 samples, 99.21%)</title><rect x="0.1052%" y="949" width="99.2106%" height="15" fill="rgb(221,76,26)" fg:x="148" fg:w="139630"/><text x="0.3552%" y="959.50">tokio::runtime::task::UnownedTask&lt;S&gt;::run</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (139,630 samples, 99.21%)</title><rect x="0.1052%" y="933" width="99.2106%" height="15" fill="rgb(225,139,18)" fg:x="148" fg:w="139630"/><text x="0.3552%" y="943.50">tokio::runtime::task::raw::RawTask::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (139,629 samples, 99.21%)</title><rect x="0.1059%" y="917" width="99.2099%" height="15" fill="rgb(230,137,11)" fg:x="149" fg:w="139629"/><text x="0.3559%" y="927.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (139,629 samples, 99.21%)</title><rect x="0.1059%" y="901" width="99.2099%" height="15" fill="rgb(212,28,1)" fg:x="149" fg:w="139629"/><text x="0.3559%" y="911.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>std::panic::catch_unwind (139,654 samples, 99.23%)</title><rect x="0.0888%" y="1093" width="99.2277%" height="15" fill="rgb(248,164,17)" fg:x="125" fg:w="139654"/><text x="0.3388%" y="1103.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (139,654 samples, 99.23%)</title><rect x="0.0888%" y="1077" width="99.2277%" height="15" fill="rgb(222,171,42)" fg:x="125" fg:w="139654"/><text x="0.3388%" y="1087.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (139,654 samples, 99.23%)</title><rect x="0.0888%" y="1061" width="99.2277%" height="15" fill="rgb(243,84,45)" fg:x="125" fg:w="139654"/><text x="0.3388%" y="1071.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (139,654 samples, 99.23%)</title><rect x="0.0888%" y="1045" width="99.2277%" height="15" fill="rgb(252,49,23)" fg:x="125" fg:w="139654"/><text x="0.3388%" y="1055.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (139,654 samples, 99.23%)</title><rect x="0.0888%" y="1029" width="99.2277%" height="15" fill="rgb(215,19,7)" fg:x="125" fg:w="139654"/><text x="0.3388%" y="1039.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (139,654 samples, 99.23%)</title><rect x="0.0888%" y="1013" width="99.2277%" height="15" fill="rgb(238,81,41)" fg:x="125" fg:w="139654"/><text x="0.3388%" y="1023.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}} (139,654 samples, 99.23%)</title><rect x="0.0888%" y="997" width="99.2277%" height="15" fill="rgb(210,199,37)" fg:x="125" fg:w="139654"/><text x="0.3388%" y="1007.50">tokio::runtime::blocking::pool::Spawner::spawn_thread::{{closure}}</text></g><g><title>[libc.so.6] (139,659 samples, 99.23%)</title><rect x="0.0888%" y="1205" width="99.2312%" height="15" fill="rgb(244,192,49)" fg:x="125" fg:w="139659"/><text x="0.3388%" y="1215.50">[libc.so.6]</text></g><g><title>[libc.so.6] (139,659 samples, 99.23%)</title><rect x="0.0888%" y="1189" width="99.2312%" height="15" fill="rgb(226,211,11)" fg:x="125" fg:w="139659"/><text x="0.3388%" y="1199.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (139,659 samples, 99.23%)</title><rect x="0.0888%" y="1173" width="99.2312%" height="15" fill="rgb(236,162,54)" fg:x="125" fg:w="139659"/><text x="0.3388%" y="1183.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (139,659 samples, 99.23%)</title><rect x="0.0888%" y="1157" width="99.2312%" height="15" fill="rgb(220,229,9)" fg:x="125" fg:w="139659"/><text x="0.3388%" y="1167.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (139,659 samples, 99.23%)</title><rect x="0.0888%" y="1141" width="99.2312%" height="15" fill="rgb(250,87,22)" fg:x="125" fg:w="139659"/><text x="0.3388%" y="1151.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (139,659 samples, 99.23%)</title><rect x="0.0888%" y="1125" width="99.2312%" height="15" fill="rgb(239,43,17)" fg:x="125" fg:w="139659"/><text x="0.3388%" y="1135.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (139,659 samples, 99.23%)</title><rect x="0.0888%" y="1109" width="99.2312%" height="15" fill="rgb(231,177,25)" fg:x="125" fg:w="139659"/><text x="0.3388%" y="1119.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>all (140,741 samples, 100%)</title><rect x="0.0000%" y="1237" width="100.0000%" height="15" fill="rgb(219,179,1)" fg:x="0" fg:w="140741"/><text x="0.2500%" y="1247.50"></text></g><g><title>tokio-runtime-w (140,637 samples, 99.93%)</title><rect x="0.0739%" y="1221" width="99.9261%" height="15" fill="rgb(238,219,53)" fg:x="104" fg:w="140637"/><text x="0.3239%" y="1231.50">tokio-runtime-w</text></g><g><title>[unknown] (957 samples, 0.68%)</title><rect x="99.3200%" y="1205" width="0.6800%" height="15" fill="rgb(232,167,36)" fg:x="139784" fg:w="957"/><text x="99.5700%" y="1215.50"></text></g></svg></svg>